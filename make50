#!/usr/bin/python3
import re
import sys
from subprocess import Popen, PIPE, STDOUT
import json

# for labeling error messages w/ colors
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

linetypes = {
    "clang_call": re.compile("^clang (.*)$"),
    "clang_message": re.compile("^\w*.c:\d+:\d+: \w*: (.*)$"),
    "make_error": re.compile("^make: Nothing to be done for `(\w*).c'.\s*$"),
    "error_gen_line": re.compile("^\d+ errors? generated.\s*$")
}

# load errors from file
with open('errors.json', 'r') as file:
    errors = json.loads(file.read())["errors"]
    for i in range (0, len(errors)):
        errors[i]["re"] = re.compile(errors[i]["actual"].replace('\\\\', '\\'))

# making their file and gathering errors
cmd = "make " + sys.argv[1]
p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
output = p.stdout.read().decode('utf-8')
outlines = output.split('\n')

# list to store blocks of standard output by error
blocks = []

error = ''
for line in outlines:
    # don't print the clang call line
    if linetypes["clang_call"].match(line):
        continue
    
    is_end = False
    for end_type in ["error_gen_line"]:
        if (linetypes[end_type].match(line) != None):
            is_end = True
            break
        
    if (is_end):
        blocks.append(error)
        error = ''
        break
    
    is_error = False
    for error_type in ["clang_message", "make_error"]:
        if (linetypes[error_type].match(line) != None):
            is_error = True
            break
    
    if (is_error):
        blocks.append(error)
        error = ''
    
    if line != '':
        error += line + '\n'
        
blocks.append(error)

for block in blocks:
    if block == '':
        continue
    
    split_block = block.split('\n', 1)
    error_line = split_block[0]
    
    # print the error line
    print (bcolors.FAIL + error_line + bcolors.ENDC, end=('\n' if len(split_block) > 1 else ''))
    if len(split_block) > 1:
        print (split_block[1], end='')
    
    error_found = False
    for error in errors:
        if (error["re"].match(block) != None):
            error_found = True
            arguments = tuple(error["re"].findall(block))[0]
            print (bcolors.OKBLUE + error["friendly"].format(*arguments) + bcolors.ENDC)
            break
        
    if (not error_found):
        print (bcolors.OKBLUE + "This is tricky. Visit us at office hours!" + bcolors.ENDC)
        
    print ('')
    