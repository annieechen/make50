#!/usr/bin/python3
import re
import sys
from subprocess import Popen, PIPE, STDOUT
import json
import os

# for labeling error messages w/ colors
class bcolors:
    OKPURPLE = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

linetypes = {
    "clang_call": re.compile("^clang (.*)$"),
    "clang_message": re.compile("^\w*.c:\d+:\d+: \w*: (.*)$"),
    "make_error": re.compile("^make: Nothing to be done for `(\w*).c'.\s*$"),
    "error_gen_line": re.compile("^\d+ errors? generated.\s*$"),
}

# ensure proper usage
if len(sys.argv) < 2:
    print (bcolors.FAIL+ "usage: make50 <program>" + bcolors.ENDC)
    exit()
    
filepath = '/home/ubuntu/workspace/errors.json'

# load errors from file
with open(filepath, 'r') as file:
    errors = json.loads(file.read())["errors"]
    for i in range (0, len(errors)):
        errors[i]["re"] = re.compile(errors[i]["actual"].replace('\\\\', '\\'))

# making their file and gathering errors
cmd = "make " + sys.argv[1]
p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
output = p.stdout.read().decode('utf-8')
outlines = output.split('\n')

# list to store blocks of standard output by error
blocks = []

error = ''
for line in outlines:
    # don't print the clang call line
    if linetypes["clang_call"].match(line):
        continue
    
    # check for end-of-output text
    is_end = False
    for end_type in ["error_gen_line"]:
        if (linetypes[end_type].match(line) != None):
            is_end = True
            break
        
    if (is_end):
        blocks.append(error)
        error = ''
        break
    
    is_error = False
    for error_type in ["clang_message", "make_error"]:
        if (linetypes[error_type].match(line) != None):
            is_error = True
            break
    
    if (is_error):
        blocks.append(error)
        error = ''
    
    if line != '':
        error += line + '\n'
        
blocks.append(error)

errors_found = False
for block in blocks:
    if block == '':
        continue
    errors_found = True
    
    split_block = block.split('\n', 1)
    error_line = split_block[0]
    
    # print the error line (if warning, this just won't split)
    split_error_line = error_line.split("error:")
    # if can be split perfectly
    if len(split_error_line) == 2:
        print (bcolors.BOLD + split_error_line[0] + bcolors.FAIL + "error:" + bcolors.ENDC + bcolors.BOLD +  split_error_line[1] + bcolors.ENDC)
    else:
        print (bcolors.BOLD + error_line + bcolors.ENDC, end=('\n' if len(split_block) > 1 else ''))
    if len(split_block) > 1:
        print (split_block[1], end='')
    
    error_found = False
    for error in errors:
        if (error["re"].match(block) != None):
            error_found = True
            arguments = tuple(error["re"].findall(block))[0]
            if type(arguments) == str:
                arguments = tuple([arguments])
            print (bcolors.WARNING + error["friendly"].format(*arguments) + bcolors.ENDC)
            break
        
    if (not error_found):
        print (bcolors.WARNING + "make50 was not able to interpret this error message." + bcolors.ENDC)
        
    print ('')

# if program compiled successfuly (or nothing to update), then print success
if (not errors_found):
    print (bcolors.OKGREEN + "Congratulations! Your program compiled successfully :)" + bcolors.ENDC)
